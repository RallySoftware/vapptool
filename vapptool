#!/usr/bin/env python -B

from optparse import OptionParser
import libxml2, os, subprocess, sys

GET_GUESTINFO = ['/usr/sbin/vmware-rpctool', '"info-get guestinfo.ovfEnv"']

def load_ovf():
    pobj = subprocess.Popen(' '.join(GET_GUESTINFO),
                            bufsize=1,
                            shell=True,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)
    buf = pobj.stdout.read()
    ret = pobj.wait()
    if ret or not buf or buf.startswith('No value found'):
        raise Exception('No value found: guestinfo.ovfEnv')
    return buf

def ovf_xpath(path):
    '''
    Given an xpath string, return the node set evaluated by the xpath.

    @returns: A node set.
    @raises: xpathError - If xpath cannot be evaluated
    '''
    nsdict = {
      'default': "http://schemas.dmtf.org/ovf/environment/1",
      'xsi':"http://www.w3.org/2001/XMLSchema-instance",
      'oe':"http://schemas.dmtf.org/ovf/environment/1",
      've':"http://www.vmware.com/schema/ovfenv" }

    xml = load_ovf()
    doc = libxml2.parseDoc(xml)

    context = doc.xpathNewContext()

    for k, v in nsdict.iteritems():
        context.xpathRegisterNs(k, v)

    return context.xpathEval(path)

def ovf_property(key):
    '''
    Given a key for a vApp property, return the value for that key.

    @returns: A string value, or None.
    @raises: Exeption - If multiple properties are found for the given key.
    '''
    nodes = ovf_xpath("/default:Environment/default:PropertySection/default:Property[@oe:key='%s']/@oe:value" %(key))
    if not nodes:
        return None
    elif len(nodes) > 1:
        raise Exception('Multiple nodes found, expected only one.')

    return nodes[0].get_content()


def cmd_inspect():
    vm_name = ovf_property('vm_name')

    if vm_name:
        return [ 0, None, None ]

    return [ 1, None, 'guestinfo.ovfEnv is present, but does not contain expected vApp properties' ]


def main():
    cmdline=sys.argv[1:]
    cmdline_parser = OptionParser()

    # define our command line options, help message
    cmdline_parser.add_option('-i', '--inspect', dest='inspect', action="store_true", default=False, help='Exits 0 when executed from on a VM within Rally vApp, otherwise non-zero')

    if not sys.argv[1:]:
        cmdline_parser.print_help()

    # parse the command line options
    (options, args) = cmdline_parser.parse_args(cmdline)

    # check that one of the following was specifiedf, and raise if not:
    #     --inspect
    #     --hosts
    #     --sysconfig-network

    try:
        if options.inspect:
            # invoke inspect function to determine if we are in a vApp.
            cmd_result = cmd_inspect()




        if cmd_result[1]:
            print(str(cmd_result[1]))

        if cmd_result[2]:
            print >> sys.stderr, str(cmd_result[2])

        sys.exit(cmd_result[0])

    except Exception, e:
        print >> sys.stderr, str(e)
        sys.exit(1)

    sys.exit(1)

if __name__ == "__main__":
    main()
